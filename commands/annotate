#!/usr/bin/env perl 

# This wrapper is started in a directory and should do some annotation.
# It should use a Perl implementation and start VEP within that directory,
# with all the right parameters. As this platform works entirely by convention
# here are the files we expect. 
#
# This is not running in the same process as the main application, so we can't
# directly access configuration values. If we need them, we'd need to process
# them for ourselves. 

use strict;
use warnings;

use File::Spec;

my $curdir = File::Spec->curdir();
my $input = File::Spec->rel2abs('input.vcf', $curdir);
my $output = File::Spec->rel2abs('output.vcf', $curdir);

# A bunch of values are local to the VEP script.

my $vep_base = "/var/local/variant_effect_predictor";
my $script = File::Spec->rel2abs("variant_effect_predictor.pl", $vep_base);
my $cache_directory = $vep_base;
my $fasta_directory = $vep_base;
my $fork_count = 4;

my $executable = $^X;

my @command = qw($executable $script 
	             --input_file $input --output_file $output --force_overwrite 
	             --vcf --format vcf 
	             --canonical --numbers --domains --pubmed
	             --fork $fork_count
	             --sift=b --polyphen=b 
	             --offline --fasta $fasta_directory --dir $cache_directory --hgvs);

# Being Perl, we can now exec() - this never returns, but is a good way to switch to
# the new script.

exec(@command) or die("couldn't exec: $!");
